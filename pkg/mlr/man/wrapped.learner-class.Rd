\name{wrapped.learner-class}
\alias{wrapped.learner-class}
\alias{wrapped.learner}
\title{wrapped.learner}
\description{Wraps an already implemented learning method from R to make it accesible to mlr.}
\details{Also inlcudes a properties object to describe the features of the learner.}
\section{Slots}{\describe{\item{\code{learner.name}:}{(\code{\link{character}}) Descriptive name of the learning method}\item{\code{learner.pack}:}{(\code{\link{character}}) R package where learner is implemented}\item{\code{train.fct.pars}:}{(\code{\link{list}}) Named list of parameters which are fixed in an internal call to the underlying train function of the learner.}\item{\code{predict.fct.pars}:}{(\code{\link{list}}) Named list of parameters which are fixed in an internal call to the underlying predict function of the learner.}\item{\code{learner.props}:}{(\code{\link{learner.props}}) Properties of the learner}}}
\section{Methods}{\describe{\item{\code{\link[=benchmark,wrapped.learner,learn.task,resample.instance-method]{benchmark}}}{\code{signature(learner = "wrapped.learner", task = "learn.task", resampling = "resample.instance")}: \code{benchmark} conducts a benchmark experiment for a single classifier on a single
data set. This consists of an inner stage and outer stage. At the outer stage a 
tuning set and a test set are repeatedly formed from the data through resampling 
(usually cross-validation or bootstrapping). The respective hyperparameters of the 
classifier are tuned on the tuning set again through an inner resampling process,
the classifier is trained on the complete tuning set with the best found 
hyperparameters and the performance is measured on the test set.}\item{\code{\link[=resample.fit,wrapped.learner,learn.task,resample.instance,list,character,character,function-method]{resample.fit}}}{\code{signature(learner = "wrapped.learner", task = "learn.task", resampling = "resample.instance", parset = "list", vars = "character", type = "character", extract = "function")}: Given the training and test indices (e.g. generated by cross-validation and generally specified by 
the \code{\linkS4class{resample.instance}} object) \code{resample.fit} 
fits the selected learner using the training sets and performs predictions for the test sets. These 
predictions are returned - encapsulated in a \code{\link{resample.result}} object. 
Optionally the fitted models are also stored.}\item{\code{\link[=resample.fit,wrapped.learner,learn.task,resample.desc,list,character,character,function-method]{resample.fit}}}{}\item{\code{\link[=initialize,wrapped.learner-method]{initialize}}}{\code{signature( = "wrapped.learner")}: Constructor.}\item{\code{\link[=set.train.par,wrapped.learner-method]{set.train.par}}}{\code{signature( = "wrapped.learner")}: Set a parameter for the underlying train function of a 
[\code{\linkS4class{wrapped.learner}}].
This is not meant for hyperparameters, pass these through the usual parset argument, but rather to
fix (somewhat technical) arguments which stay the same for the whole experiment. You should not have to use this too often.}\item{\code{\link[=set.predict.par,wrapped.learner-method]{set.predict.par}}}{\code{signature( = "wrapped.learner")}: Set a parameter for the underlying predict function of a wrapped learner. 
Used to fix (somewhat techical) arguments which stay the same for the whole experiment.
You should not have to use this too often.}}}
