\name{learn.task-class}
\alias{learn.task-class}
\alias{learn.task}
\title{learn.task}
\description{A learning task is a general description object for a machine learning experiment. 
It wraps the data source and specifies - through its subclasses - the type of the task (e.g. classification or regression), 
the target variable, the loss function and other details of the problem. As this is just an abstract base class, 
you should not instantiate it directly but use the inheriting classes and their factory methods.}
\seealso{classif.task regr.task}
\section{Slots}{\describe{\item{\code{data}:}{(\code{\link{data.frame}}) Dataframe which includes all the data for the task.}\item{\code{weights}:}{(\code{\link{numeric}}) An optional vector of weights to be used in the fitting process. Default is a weight of 1 for every case.}\item{\code{target}:}{(\code{\link{character}}) Name of the target variable.}\item{\code{data.desc}:}{(\code{\link{data.desc}}) Contains logical values describing properties of the dataframe e.g. whether it has 
characters or missing values (see desc and \code{\linkS4class{data.desc}}).}}}
\section{Methods}{\describe{\item{\code{\link[=benchmark,wrapped.learner,learn.task,resample.instance-method]{benchmark}}}{\code{signature(learner = "wrapped.learner", task = "learn.task", resampling = "resample.instance")}: \code{benchmark} conducts a benchmark experiment for a single classifier on a single
data set. This consists of an inner stage and outer stage. At the outer stage a 
tuning set and a test set are repeatedly formed from the data through resampling 
(usually cross-validation or bootstrapping). The respective hyperparameters of the 
classifier are tuned on the tuning set again through an inner resampling process,
the classifier is trained on the complete tuning set with the best found 
hyperparameters and the performance is measured on the test set.}\item{\code{\link[=resample.fit,wrapped.learner,learn.task,resample.instance,list,character,character,function-method]{resample.fit}}}{\code{signature(learner = "wrapped.learner", task = "learn.task", resampling = "resample.instance", parset = "list", vars = "character", type = "character", extract = "function")}: Given the training and test indices (e.g. generated by cross-validation and generally specified by 
the \code{\linkS4class{resample.instance}} object) \code{resample.fit} 
fits the selected learner using the training sets and performs predictions for the test sets. These 
predictions are returned - encapsulated in a \code{\link{resample.result}} object. 
Optionally the fitted models are also stored.}\item{\code{\link[=resample.fit,wrapped.learner,learn.task,resample.desc,list,character,character,function-method]{resample.fit}}}{}\item{\code{\link[=resample.performance,learn.task,resample.result,loss,function,function,function-method]{resample.performance}}}{\code{signature(task = "learn.task", result = "resample.result", loss = "loss", aggr1 = "function", aggr2 = "function", spread = "function")}: Measures the quality of predictions w.r.t. some loss function for a resampled fit.}\item{\code{\link[=initialize,learn.task-method]{initialize}}}{\code{signature( = "learn.task")}: Constructor.}\item{\code{\link[=[,learn.task-method]{[}}}{\code{signature( = "learn.task")}: Getter.}}}
