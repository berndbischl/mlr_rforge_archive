Tuning Hyperparameters
======================

Many classification algorithms feature a set of hyperparameters that
either need to be selected by the user or through resampling,
e.g. cross-validation. Setting them by hand was already covered in the
section about training_ and resampling_ -- simply use the
``par.val`` argument in the makeLearner_ method.

Assuming, you have understood how resampling_ works, it is
quite simple to implement a grid search, which is one of the standard
-- albeit slow -- ways to choose an appropriate set of parameters from a
given range of values.


Classification example
----------------------

We again use the iris data set, included in R, but now, we want to
tune a SVM with a polynomial kernel.

We start by loading the **mlrTune** package and creating a classification
task, just like in the tutorial on training_:

<<>>=
library("mlrTune")
task <- makeClassifTask(data=iris, target="Species")
@ 

Next, we need to create a ParamSet_ object, which describes the parameter space 
we wish to search in. This is done via the function makeParamSet_.
Since we will use a grid search strategy, we add a discrete parameter for the 
``C`` and ``sigma`` parameter of the SVM to the parameter set.
More details concerning parameter sets are explained in section :doc:`params`.

<<>>=
ps <- makeParamSet(makeDiscreteParam("C", values=2^(-1:1)),
                   makeDiscreteParam("sigma", values=2^(-1:1)))
@ 

We will use cross-validation to assess the quality of a parameter
combination. For this we need to create a resampling description just
like in the resampling_ part of the tutorial:

<<>>=
rdesc <- makeResampleDesc("CV", iters=3)
@ 

Before we can actually tune our classifier, we need an instance of a
TuneControl_ object. These describe the optimization strategy
used. Here we use a grid search:

<<>>=
ctrl <- makeTuneControlGrid()
@ 

Finally, by combining all the previous pieces, we can tune the SVM
using our TuneControl_ instance and the resampling strategy,
described by the ``rdesc`` variable.

<<>>=
tune(makeLearner("classif.ksvm"), task=task, resampling=rdesc, par.set=ps, control=ctrl)
@ 

Let's take another closer look at the example above. The parameter grid has
to be a named list, where every entry has to be named according to the
corresponding parameter of the underlying R function (in this case
"ksvm" from the kernlab package, see its respective help page).  Its
value is a vector of feasible values for this hyperparameter. The
complete grid is just the cross-product of all feasible values.

(Please note that with ksvm we encounter a somewhat special case, as
the parameters should be passed through the "kernel" and "kpar"
structures.  To make this simpler, t.svm allows direct passing. Again,
see documentation.) 

Tune now simply performs the cross-validation for every element of the
cross-product and selects the one with the best mean performance
measure.


Regression example
------------------

Let's tune `k` of a `k`-nearest-neighbor-regression model (implemented
in package ``kknn``) on the ``BostonHousing`` data set.

<<eval=FALSE>>=
library("mlbench")
data(BostonHousing)

task <- makeRegrTask(data = BostonHousing, target = "medv")

## Range of the value k
ps <- makeParamSet(makeDiscreteParam("k", 1:7))

## Evaluate with 5-fold cross-validation
rdesc <- makeResampleDesc("CV", iters = 5)

## Create a grid tuner:
ctrl <- makeTuneControlGrid()

## Create a learner:
lrn <- makeLearner("regr.kknn")

## Tune k-nearest-neighbor-regression with mean squared error as default measure
tune(learner=lrn, task=task, resampling=rdesc, par.set=ps, control=ctrl, measures=mse)
@ 



.. _makeParamSet: http://www.statistik.tu-dortmund.de/~bischl/rdocs/ParamHelpers/makeParamSet.html
.. _makeLearner: http://www.statistik.tu-dortmund.de/~bischl/rdocs/mlr/makeLearner.html
.. _train: http://www.statistik.tu-dortmund.de/~bischl/rdocs/mlr/train.html
.. _resample: http://www.statistik.tu-dortmund.de/~bischl/rdocs/mlr/resample.html
.. _ParamSet: http://www.statistik.tu-dortmund.de/~bischl/rdocs/ParamHelpers/makeParamSet.html
.. _TuneControl: http://www.statistik.tu-dortmund.de/~bischl/rdocs/mlrTune/TuneControl.html

.. _training: :doc:`tutorial/train`
.. _resampling: :doc:`tutorial/resample`

.. |tune-varsel_processing| image:: /_images/tune-varsel_processing.png
     :align: middle
     :width: 50em
     :alt: Variable selection as a tuning.
