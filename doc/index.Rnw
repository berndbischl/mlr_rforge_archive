Machine Learning in R (mlr)
===========================

.. warning::

  Both the package **mlr** as well as its documentation are very much
  work in progress. Please check back often for updates until we release
  a version to CRAN. We plan to do this real soon now.

.. toctree::
   :hidden:
   
   tutorial/index
   integrated_learners
   extension_points/index
   faq
   glossary
   changes
   literature

Introduction
============

R does not define a standardized interface for all its machine learning
algorithms. Therefore, for any non-trivial experiments, 
you need to write lengthy, tedious and error-prone wrappers to call the different 
algorithms and unify their respective output. Additionally you need to implement infrastructure
to resample your models, optimize hyperparameters, select features,
cope with pre- and post-processing of data and compare models in a statistically meaningful way.
As this becomes computationally expensive, you might want to parallelize your experiments
as well. This often forces useRs to make crummy trade-offs in their experiments due to 
time constraints or lacking expert programming skills.
**mlr** provides this infrastructure so that you can focus on your experiments!
The framework currently focuses on supervised methods like classification 
and regression and their corresponding evaluation and optimization, but further extensions are
planned. It is written in a way that you can extend it yourself or deviate from the implemented
convenience methods and construct your own complex experiments or algorithms.

Features
""""""""

* Clear S3 interface to R classification and regression methods
* Easy extension mechanism through S3 inheritance
* Abstract description of learners and tasks by properties 
* Parameter system for learners to encode data types and constraints
* Many convenience methods and generic building blocks for your
  machine learning experiments
* Resampling like bootstrapping, cross-validation and subsampling 
* Easy hyperparameter tuning using different optimization strategies
* Variable selection with filters and wrappers 
* Parallelization is built-in
* Extension points to integrate your own stuff
* Unit-tested using `testthat <http://cran.r-project.org/web/packages/testthat/index.html>`_

As the framework has become rather extensive, it is currently divided into the following R packages:

* **mlr**: The basic package. Fitting, predicting, evaluating, resampling.
* **mlrTune**: Tune hyper-parameters of a learner with different optimization algorithms. 
  Multi-criteria optimization is possible, too. 
* **mlrFeatSel**: Feature selection with filters and wrappers. 
  Multi-criteria optimization is possible, too.
* **mlrChains**: Combine different processing steps to a complex data mining chain. 
  Enables nested resampling of optimized models.
* **mlrMBO**: Optimize functions with a model-based sequential 
  parameter optimization method. Useful e.g. for the optimaization of expensive black-box
  functions.

Get in touch
""""""""""""

If you are interested in the package, have a question regarding the usage or a feature request,
or maybe want to help improving **mlr**, please send a mail to the list at
mlr-general@lists.r-forge.r-project.org or to the maintainer Bernd Bischl 
at bischl@statistik.uni-dortmund.de.

Installation
""""""""""""

You can currently install the package by performing the following steps:

* Check out the SVN repository containing all packages. Linux users can check 
  out the packages by creating a new directory and then downloading the entire 
  tree into this directory in the terminal with the command 
  ``svn co svn://svn.r-forge.r-project.org/svnroot/mlr/``. Windows users may use 
  their chosen Subversion client (e.g. TortoiseSVN) and perform a SVN Checkout
  with the URL ``svn://svn.r-forge.r-project.org/svnroot/mlr/`` on a newly
  created folder.
* Make sure that your SVN bin directory is added to your system path. Linux users
  can do this by using the command ``export PATH=$PATH:/<your SVN bin dir>``.
  Windows users can do the same by starting command prompt (cmd.exe) and entering
  the command ``SET PATH=\%PATH\%;<your SVN bin dir>``. For instance, users at 
  the TU Dortmund Statistics Department can enter ``SET PATH=\%PATH\%;t:\svn\bin``.
* Install the packages using ``make install``. Use the terminal in Linux or the 
  command prompt in Windows, move to the respective subdirectories of the 
  desired packages (e.g. mlr, mlrTune, ...) and enter ``make install``. It is 
  recommended to do this with all of the five mlr packages.
* mlr depends on a set of other R packages. Be sure to install these packages using
  the provided ``install_dependencies.R``. This file automatically identifies missing
  packages and installs them. Additionally the packages `roxygen2 <http://cran.r-project.org/web/packages/roxygen2/index.html>`_ and `devtools <http://cran.r-project.org/web/packages/devtools/index.html>`_ should be installed.

Project Link-List
"""""""""""""""""

* :doc:`tutorial/start`
* :doc:`tutorial/index`
* List of the :doc:`integrated_learners`
* List of :doc:`extension_points/index`
* R-Forge_ project page
* Bugtracker_

.. _Bugtracker: https://r-forge.r-project.org/tracker/?atid=2012&group_id=494&func=browse
.. _RUnit: https://sourceforge.net/projects/runit/
.. _R-Forge: http://r-forge.r-project.org/projects/mlr/
